diff -ruN webalizer-2.01-10-pristine/hashtab.c webalizer-2.01-10/hashtab.c
--- webalizer-2.01-10-pristine/hashtab.c	Fri Jun 15 10:34:24 2001
+++ webalizer-2.01-10/hashtab.c	Wed Dec 21 17:01:43 2005
@@ -70,7 +70,7 @@
 UNODEPTR new_unode(char *);                   /* new url node             */
 RNODEPTR new_rnode(char *);                   /* new referrer node        */
 ANODEPTR new_anode(char *);                   /* new user agent node      */
-SNODEPTR new_snode(char *);                   /* new search string..      */
+SNODEPTR new_snode(char *, char *);           /* new search string..      */
 INODEPTR new_inode(char *);                   /* new ident node           */
 #ifdef USE_DNS
 DNODEPTR new_dnode(char *);                   /* new DNS node             */
@@ -669,10 +669,10 @@
 /* NEW_SNODE - Search str node creation      */
 /*********************************************/
 
-SNODEPTR new_snode(char *str)
+SNODEPTR new_snode(char *str, char *site)
 {
    SNODEPTR newptr;
-   char     *sptr;
+   char     *sptr, *sptr2;
 
    if (strlen(str) >= MAXSRCHH)
    {
@@ -686,15 +686,39 @@
       str[MAXSRCHH-1]=0;
    }
 
+   if (strlen(site) >= MAXSRCHH)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_snode] %s (%d)",msg_big_one,strlen(site));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",site);
+         fprintf(stderr,"\n");
+      }
+      site[MAXSRCHH-1]=0;
+   }
+
    if ( (sptr=malloc(strlen(str)+1))==NULL ) return (SNODEPTR)NULL;
    strcpy(sptr,str);
 
+   if ( (sptr2=malloc(strlen(site)+1))==NULL )
+   {
+       free(sptr);
+       return (SNODEPTR)NULL;
+   }
+   strcpy(sptr2,site);
+
    if (( newptr = malloc(sizeof(struct snode))) != NULL)
    {
       newptr->string= sptr;
+      newptr->site= sptr2;
       newptr->count = 1;
    }
-   else free(sptr);
+   else
+   {
+   free(sptr);
+   free(sptr2);
+   }
    return newptr;
 }
 
@@ -702,17 +726,18 @@
 /* PUT_SNODE - insert/update search str node */
 /*********************************************/
 
-int put_snode(char *str, u_long count, SNODEPTR *htab)
+int put_snode(char *str, char *site, u_long count, SNODEPTR *htab)
 {
    SNODEPTR cptr,nptr;
 
-   if (str[0]==0 || str[0]==' ') return 0;     /* skip bad search strs */
+   if (str[0]==' ') return 0;     /* skip bad search strs */
+   if (site[0]==' ') return 0;     /* skip bad search strs */
 
    /* check if hashed */
    if ( (cptr = htab[hash(str)]) == NULL)
    {
       /* not hashed */
-      if ( (nptr=new_snode(str)) != NULL)
+      if ( (nptr=new_snode(str,site)) != NULL)
       {
          nptr->count = count;
          nptr->next = NULL;
@@ -724,7 +749,7 @@
       /* hashed */
       while (cptr != NULL)
       {
-         if (strcmp(cptr->string,str)==0)
+         if (strcmp(cptr->string,str)==0 && strcmp(cptr->site,site)==0)
          {
             /* found... bump counter */
             cptr->count+=count;
@@ -733,7 +758,7 @@
          cptr = cptr->next;
       }
       /* not found... */
-      if ( (nptr = new_snode(str)) != NULL)
+      if ( (nptr = new_snode(str,site)) != NULL)
       {
          nptr->count = count;
          nptr->next  = htab[hash(str)];
@@ -762,6 +787,7 @@
          {
             temp = aptr->next;
             free (aptr->string);
+            free (aptr->site);
             free (aptr);
             aptr = temp;
          }
diff -ruN webalizer-2.01-10-pristine/hashtab.c.orig webalizer-2.01-10/hashtab.c.orig
--- webalizer-2.01-10-pristine/hashtab.c.orig	Thu Jan  1 01:00:00 1970
+++ webalizer-2.01-10/hashtab.c.orig	Fri Jun 15 10:34:24 2001
@@ -0,0 +1,1176 @@
+/*
+    webalizer - a web server log analysis program
+
+    Copyright (C) 1997-2001  Bradford L. Barrett (brad@mrunix.net)
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version, and provided that the above
+    copyright and permission notice is included with all distributed
+    copies of this or derived software.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
+
+    This software uses the gd graphics library, which is copyright by
+    Quest Protein Database Center, Cold Spring Harbor Labs.  Please
+    see the documentation supplied with the library for additional
+    information and license terms, or visit www.boutell.com/gd/ for the
+    most recent version of the library and supporting documentation.
+*/
+
+/*********************************************/
+/* STANDARD INCLUDES                         */
+/*********************************************/
+
+#include <time.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>                           /* normal stuff             */
+#include <ctype.h>
+#include <sys/utsname.h>
+#include <sys/times.h>
+
+/* ensure getopt */
+#ifdef HAVE_GETOPT_H
+#include <getopt.h>
+#endif
+
+/* ensure sys/types */
+#ifndef _SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+/* some systems need this */
+#ifdef HAVE_MATH_H
+#include <math.h>
+#endif
+
+/* SunOS 4.x Fix */
+#ifndef CLK_TCK
+#define CLK_TCK _SC_CLK_TCK
+#endif
+
+#include "webalizer.h"                        /* main header              */
+#include "lang.h"
+#include "linklist.h"
+#include "hashtab.h"
+
+/* internal function prototypes */
+
+HNODEPTR new_hnode(char *);                   /* new host node            */
+UNODEPTR new_unode(char *);                   /* new url node             */
+RNODEPTR new_rnode(char *);                   /* new referrer node        */
+ANODEPTR new_anode(char *);                   /* new user agent node      */
+SNODEPTR new_snode(char *);                   /* new search string..      */
+INODEPTR new_inode(char *);                   /* new ident node           */
+#ifdef USE_DNS
+DNODEPTR new_dnode(char *);                   /* new DNS node             */
+#endif  /* USE_DNS */
+
+void     update_entry(char *);                /* update entry/exit        */
+void     update_exit(char *);                 /* page totals              */
+
+u_long   hash(char *);                        /* hash function            */
+
+/* local data */
+
+HNODEPTR sm_htab[MAXHASH];                    /* hash tables              */
+HNODEPTR sd_htab[MAXHASH];
+UNODEPTR um_htab[MAXHASH];                    /* for hits, sites,         */
+RNODEPTR rm_htab[MAXHASH];                    /* referrers and agents...  */
+ANODEPTR am_htab[MAXHASH];
+SNODEPTR sr_htab[MAXHASH];                    /* search string table      */
+INODEPTR im_htab[MAXHASH];                    /* ident table (username)   */
+#ifdef USE_DNS
+DNODEPTR host_table[MAXHASH];                 /* DNS hash table           */
+#endif  /* USE_DNS */
+
+
+/*********************************************/
+/* DEL_HTABS - clear out our hash tables     */
+/*********************************************/
+
+void del_htabs()
+{
+   del_hlist(sd_htab);                        /* Clear out our various    */
+   del_ulist(um_htab);                        /* hash tables here by      */
+   del_hlist(sm_htab);                        /* calling the appropriate  */
+   del_rlist(rm_htab);                        /* del_* fuction for each   */
+   del_alist(am_htab);
+   del_slist(sr_htab);
+   del_ilist(im_htab);
+#ifdef USE_DNS
+/* del_dlist(host_table);  */                    /* delete DNS hash table    */
+#endif  /* USE_DNS */
+}
+
+/*********************************************/
+/* NEW_HNODE - create host node              */
+/*********************************************/
+
+HNODEPTR new_hnode(char *str)
+{
+   HNODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXHOST)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_hnode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXHOST-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL ) return (HNODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct hnode))) != NULL)
+   {
+      newptr->string    =sptr;
+      newptr->visit     =0;
+      newptr->tstamp    =0;
+      newptr->lasturl   =blank_str;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_HNODE - insert/update host node       */
+/*********************************************/
+
+int put_hnode( char     *str,   /* Hostname  */
+               int       type,  /* obj type  */
+               u_long    count, /* hit count */
+               u_long    file,  /* File flag */
+               double    xfer,  /* xfer size */
+               u_long   *ctr,   /* counter   */
+               u_long    visit, /* visits    */
+               u_long    tstamp,/* timestamp */
+               char     *lasturl, /* lasturl */
+               HNODEPTR *htab)  /* ptr>next  */
+{
+   HNODEPTR cptr,nptr;
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_hnode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->files = file;
+         nptr->xfer  = xfer;
+         nptr->next  = NULL;
+         htab[hash(str)] = nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+
+         if (visit)
+         {
+            nptr->visit=(visit-1);
+            nptr->lasturl=find_url(lasturl);
+            nptr->tstamp=tstamp;
+            return 0;
+         }
+         else
+         {
+            if (ispage(log_rec.url))
+            {
+               if (htab==sm_htab) update_entry(log_rec.url);
+               nptr->lasturl=find_url(log_rec.url);
+               nptr->tstamp=tstamp;
+               nptr->visit=1;
+            }
+         }
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+         {
+            if ((type==cptr->flag)||((type!=OBJ_GRP)&&(cptr->flag!=OBJ_GRP)))
+            {
+               /* found... bump counter */
+               cptr->count+=count;
+               cptr->files+=file;
+               cptr->xfer +=xfer;
+
+               if (ispage(log_rec.url))
+               {
+                  if ((tstamp-cptr->tstamp)>=visit_timeout)
+                  {
+                     cptr->visit++;
+                     if (htab==sm_htab)
+                     {
+                        update_exit(cptr->lasturl);
+                        update_entry(log_rec.url);
+                     }
+                  }
+                  cptr->lasturl=find_url(log_rec.url);
+                  cptr->tstamp=tstamp;
+               }
+               return 0;
+            }
+         }
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_hnode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->files = file;
+         nptr->xfer  = xfer;
+         nptr->next  = htab[hash(str)];
+         htab[hash(str)]=nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+
+         if (visit)
+         {
+            nptr->visit = (visit-1);
+            nptr->lasturl=find_url(lasturl);
+            nptr->tstamp= tstamp;
+            return 0;
+         }
+         else
+         {
+            if (ispage(log_rec.url))
+            {
+               if (htab==sm_htab) update_entry(log_rec.url);
+               nptr->lasturl=find_url(log_rec.url);
+               nptr->tstamp= tstamp;
+               nptr->visit=1;
+            }
+         }
+      }
+   }
+
+   if (nptr!=NULL)
+   {
+      /* set object type */
+      if (type==OBJ_GRP) nptr->flag=OBJ_GRP;            /* is it a grouping? */
+      else
+      {
+         /* check if it's a hidden object */
+         if ((hide_sites)||(isinlist(hidden_sites,nptr->string)!=NULL))
+           nptr->flag=OBJ_HIDE;
+      }
+   }
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_HLIST - delete host hash table        */
+/*********************************************/
+
+void	del_hlist(HNODEPTR *htab)
+{
+   /* free memory used by hash table */
+   HNODEPTR aptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         aptr = htab[i];
+         while (aptr != NULL)
+         {
+            temp = aptr->next;
+            free (aptr->string);    /* free hostname string space */
+            free (aptr);            /* free hostname structure    */
+            aptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+/*********************************************/
+/* NEW_UNODE - URL node creation             */
+/*********************************************/
+
+UNODEPTR new_unode(char *str)
+{
+   UNODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXURLH)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_unode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXURLH-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL) return (UNODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct unode))) != NULL)
+   {
+      newptr->string=sptr;
+      newptr->count = 0;
+      newptr->flag  = OBJ_REG;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_UNODE - insert/update URL node        */
+/*********************************************/
+
+int put_unode(char *str, int type, u_long count, double xfer,
+              u_long *ctr, u_long entry, u_long exit, UNODEPTR *htab)
+{
+   UNODEPTR cptr,nptr;
+
+   if (str[0]=='-') return 0;
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_unode(str)) != NULL)
+      {
+         nptr->flag = type;
+         nptr->count= count;
+         nptr->xfer = xfer;
+         nptr->next = NULL;
+         nptr->entry= entry;
+         nptr->exit = exit;
+         htab[hash(str)] = nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+         {
+            if ((type==cptr->flag)||((type!=OBJ_GRP)&&(cptr->flag!=OBJ_GRP)))
+            {
+               /* found... bump counter */
+               cptr->count+=count;
+               cptr->xfer += xfer;
+               return 0;
+            }
+         }
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_unode(str)) != NULL)
+      {
+         nptr->flag = type;
+         nptr->count= count;
+         nptr->xfer = xfer;
+         nptr->next = htab[hash(str)];
+         nptr->entry= entry;
+         nptr->exit = exit;
+         htab[hash(str)]=nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+      }
+   }
+   if (nptr!=NULL)
+   {
+      if (type==OBJ_GRP) nptr->flag=OBJ_GRP;
+      else if (isinlist(hidden_urls,nptr->string)!=NULL)
+                         nptr->flag=OBJ_HIDE;
+   }
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_ULIST - delete URL hash table         */
+/*********************************************/
+
+void	del_ulist(UNODEPTR *htab)
+{
+   /* free memory used by hash table */
+   UNODEPTR aptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         aptr = htab[i];
+         while (aptr != NULL)
+         {
+            temp = aptr->next;
+            free (aptr->string);  /* free up URL string memory */
+            free (aptr);          /* free up URL struct node   */
+            aptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+/*********************************************/
+/* NEW_RNODE - Referrer node creation        */
+/*********************************************/
+
+RNODEPTR new_rnode(char *str)
+{
+   RNODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXREFH)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_rnode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXREFH-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL ) return (RNODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct rnode))) != NULL)
+   {
+      newptr->string= sptr;
+      newptr->count = 1;
+      newptr->flag  = OBJ_REG;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_RNODE - insert/update referrer node   */
+/*********************************************/
+
+int put_rnode(char *str, int type, u_long count, u_long *ctr, RNODEPTR *htab)
+{
+   RNODEPTR cptr,nptr;
+
+   if (str[0]=='-') strcpy(str,"- (Direct Request)");
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_rnode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->next  = NULL;
+         htab[hash(str)] = nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+         {
+            if ((type==cptr->flag)||((type!=OBJ_GRP)&&(cptr->flag!=OBJ_GRP)))
+            {
+               /* found... bump counter */
+               cptr->count+=count;
+               return 0;
+            }
+         }
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_rnode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->next  = htab[hash(str)];
+         htab[hash(str)]=nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+      }
+   }
+   if (nptr!=NULL)
+   {
+      if (type==OBJ_GRP) nptr->flag=OBJ_GRP;
+      else if (isinlist(hidden_refs,nptr->string)!=NULL)
+                         nptr->flag=OBJ_HIDE;
+   }
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_RLIST - delete referrer hash table    */
+/*********************************************/
+
+void	del_rlist(RNODEPTR *htab)
+{
+   /* free memory used by hash table */
+   RNODEPTR aptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         aptr = htab[i];
+         while (aptr != NULL)
+         {
+            temp = aptr->next;
+            free (aptr->string);
+            free (aptr);
+            aptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+/*********************************************/
+/* NEW_ANODE - User Agent node creation      */
+/*********************************************/
+
+ANODEPTR new_anode(char *str)
+{
+   ANODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXAGENT)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_anode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXAGENT-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL ) return (ANODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct anode))) != NULL)
+   {
+      newptr->string= sptr;
+      newptr->count = 1;
+      newptr->flag  = OBJ_REG;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_ANODE - insert/update user agent node */
+/*********************************************/
+
+int put_anode(char *str, int type, u_long count, u_long *ctr, ANODEPTR *htab)
+{
+   ANODEPTR cptr,nptr;
+
+   if (str[0]=='-') return 0;     /* skip bad user agents */
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_anode(str)) != NULL)
+      {
+         nptr->flag = type;
+         nptr->count= count;
+         nptr->next = NULL;
+         htab[hash(str)] = nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+         {
+            if ((type==cptr->flag)||((type!=OBJ_GRP)&&(cptr->flag!=OBJ_GRP)))
+            {
+               /* found... bump counter */
+               cptr->count+=count;
+               return 0;
+            }
+         }
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_anode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->next  = htab[hash(str)];
+         htab[hash(str)]=nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+      }
+   }
+   if (type==OBJ_GRP) nptr->flag=OBJ_GRP;
+   else if (isinlist(hidden_agents,nptr->string)!=NULL)
+                      nptr->flag=OBJ_HIDE;
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_ALIST - delete user agent hash table  */
+/*********************************************/
+
+void	del_alist(ANODEPTR *htab)
+{
+   /* free memory used by hash table */
+   ANODEPTR aptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         aptr = htab[i];
+         while (aptr != NULL)
+         {
+            temp = aptr->next;
+            free (aptr->string);
+            free (aptr);
+            aptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+/*********************************************/
+/* NEW_SNODE - Search str node creation      */
+/*********************************************/
+
+SNODEPTR new_snode(char *str)
+{
+   SNODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXSRCHH)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_snode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXSRCHH-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL ) return (SNODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct snode))) != NULL)
+   {
+      newptr->string= sptr;
+      newptr->count = 1;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_SNODE - insert/update search str node */
+/*********************************************/
+
+int put_snode(char *str, u_long count, SNODEPTR *htab)
+{
+   SNODEPTR cptr,nptr;
+
+   if (str[0]==0 || str[0]==' ') return 0;     /* skip bad search strs */
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_snode(str)) != NULL)
+      {
+         nptr->count = count;
+         nptr->next = NULL;
+         htab[hash(str)] = nptr;
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+         {
+            /* found... bump counter */
+            cptr->count+=count;
+            return 0;
+         }
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_snode(str)) != NULL)
+      {
+         nptr->count = count;
+         nptr->next  = htab[hash(str)];
+         htab[hash(str)]=nptr;
+      }
+   }
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_SLIST - delete search str hash table  */
+/*********************************************/
+
+void	del_slist(SNODEPTR *htab)
+{
+   /* free memory used by hash table */
+   SNODEPTR aptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         aptr = htab[i];
+         while (aptr != NULL)
+         {
+            temp = aptr->next;
+            free (aptr->string);
+            free (aptr);
+            aptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+/*********************************************/
+/* NEW_INODE - create ident (username) node  */
+/*********************************************/
+
+INODEPTR new_inode(char *str)
+{
+   INODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXIDENT)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_inode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXIDENT-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL ) return (INODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct inode))) != NULL)
+   {
+      newptr->string    =sptr;
+      newptr->visit     =1;
+      newptr->tstamp    =0;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_INODE - insert/update ident node      */
+/*********************************************/
+
+int put_inode( char     *str,   /* ident str */
+               int       type,  /* obj type  */
+               u_long    count, /* hit count */
+               u_long    file,  /* File flag */
+               double    xfer,  /* xfer size */
+               u_long   *ctr,   /* counter   */
+               u_long    visit, /* visits    */
+               u_long    tstamp,/* timestamp */
+               INODEPTR *htab)  /* hashtable */
+{
+   INODEPTR cptr,nptr;
+
+   if ((str[0]=='-') || (str[0]==0)) return 0;  /* skip if no username */
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_inode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->files = file;
+         nptr->xfer  = xfer;
+         nptr->next  = NULL;
+         htab[hash(str)] = nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+
+         if (visit)
+         {
+            nptr->visit=(visit-1);
+            nptr->tstamp=tstamp;
+            return 0;
+         }
+         else
+         {
+            if (ispage(log_rec.url)) nptr->tstamp=tstamp;
+         }
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+         {
+            if ((type==cptr->flag)||((type!=OBJ_GRP)&&(cptr->flag!=OBJ_GRP)))
+            {
+               /* found... bump counter */
+               cptr->count+=count;
+               cptr->files+=file;
+               cptr->xfer +=xfer;
+
+               if (ispage(log_rec.url))
+               {
+                  if ((tstamp-cptr->tstamp)>=visit_timeout)
+                     cptr->visit++;
+                  cptr->tstamp=tstamp;
+               }
+               return 0;
+            }
+         }
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_inode(str)) != NULL)
+      {
+         nptr->flag  = type;
+         nptr->count = count;
+         nptr->files = file;
+         nptr->xfer  = xfer;
+         nptr->next  = htab[hash(str)];
+         htab[hash(str)]=nptr;
+         if (type!=OBJ_GRP) (*ctr)++;
+
+         if (visit)
+         {
+            nptr->visit = (visit-1);
+            nptr->tstamp= tstamp;
+            return 0;
+         }
+         else
+         {
+            if (ispage(log_rec.url)) nptr->tstamp= tstamp;
+         }
+      }
+   }
+
+   if (nptr!=NULL)
+   {
+      /* set object type */
+      if (type==OBJ_GRP) nptr->flag=OBJ_GRP;            /* is it a grouping? */
+      else
+      {
+         /* check if it's a hidden object */
+         if (isinlist(hidden_users,nptr->string)!=NULL)
+           nptr->flag=OBJ_HIDE;
+      }
+   }
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_ILIST - delete ident hash table       */
+/*********************************************/
+
+void	del_ilist(INODEPTR *htab)
+{
+   /* free memory used by hash table */
+   INODEPTR aptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         aptr = htab[i];
+         while (aptr != NULL)
+         {
+            temp = aptr->next;
+            free (aptr->string);    /* free ident string space */
+            free (aptr);            /* free ident structure    */
+            aptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+#ifdef USE_DNS   /* only add these for DNS   */
+
+/*********************************************/
+/* NEW_DNODE - DNS resolver node creation    */
+/*********************************************/
+
+DNODEPTR new_dnode(char *str)
+{
+   DNODEPTR newptr;
+   char     *sptr;
+
+   if (strlen(str) >= MAXHOST)
+   {
+      if (verbose)
+      {
+         fprintf(stderr,"[new_dnode] %s (%d)",msg_big_one,strlen(str));
+         if (debug_mode)
+            fprintf(stderr,":\n--> %s",str);
+         fprintf(stderr,"\n");
+      }
+      str[MAXHOST-1]=0;
+   }
+
+   if ( (sptr=malloc(strlen(str)+1))==NULL ) return (DNODEPTR)NULL;
+   strcpy(sptr,str);
+
+   if (( newptr = malloc(sizeof(struct dnode))) != NULL)
+   {
+      newptr->string= sptr;
+   }
+   else free(sptr);
+   return newptr;
+}
+
+/*********************************************/
+/* PUT_DNODE - insert/update dns host node   */
+/*********************************************/
+
+int put_dnode(char *str, struct in_addr *addr, DNODEPTR *htab)
+{
+   DNODEPTR cptr,nptr;
+
+   if (str[0]==0 || str[0]==' ') return 0;     /* skip bad hostnames */
+
+   /* check if hashed */
+   if ( (cptr = htab[hash(str)]) == NULL)
+   {
+      /* not hashed */
+      if ( (nptr=new_dnode(str)) != NULL)
+      {
+         if (addr) memcpy(&nptr->addr, addr, sizeof(struct in_addr));
+            else   memset(&nptr->addr, 0, sizeof(struct in_addr));
+         nptr->next = NULL;
+         htab[hash(str)] = nptr;
+      }
+   }
+   else
+   {
+      /* hashed */
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0) return 0;
+         cptr = cptr->next;
+      }
+      /* not found... */
+      if ( (nptr = new_dnode(str)) != NULL)
+      {
+         if (addr) memcpy(&nptr->addr, addr, sizeof(struct in_addr));
+            else   memset(&nptr->addr, 0, sizeof(struct in_addr));
+         nptr->next  = htab[hash(str)];
+         htab[hash(str)]=nptr;
+      }
+   }
+   return nptr==NULL;
+}
+
+/*********************************************/
+/* DEL_DLIST - delete dns hash table         */
+/*********************************************/
+
+void	del_dlist(DNODEPTR *htab)
+{
+   /* free memory used by hash table */
+   DNODEPTR dptr,temp;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      if (htab[i] != NULL)
+      {
+         dptr = htab[i];
+         while (dptr != NULL)
+         {
+            temp = dptr->next;
+            free (dptr->string);
+            free (dptr);
+            dptr = temp;
+         }
+         htab[i]=NULL;
+      }
+   }
+}
+
+#endif /* USE_DNS */
+
+/*********************************************/
+/* HASH - return hash value for string       */
+/*********************************************/
+
+u_long hash(char *str)
+{
+   u_long hashval;
+   for (hashval = 0; *str != '\0'; str++)
+      hashval = *str + 31 * hashval;
+   return hashval % MAXHASH;
+}
+
+/*********************************************/
+/* FIND_URL - Find URL in hash table         */
+/*********************************************/
+
+char *find_url(char *str)
+{
+   UNODEPTR cptr;
+
+   if ( (cptr=um_htab[hash(str)]) != NULL)
+   {
+      while (cptr != NULL)
+      {
+         if (strcmp(cptr->string,str)==0)
+            return cptr->string;
+         cptr = cptr->next;
+      }
+   }
+   return blank_str;   /* shouldn't get here */
+}
+
+/*********************************************/
+/* UPDATE_ENTRY - update entry page total    */
+/*********************************************/
+
+void update_entry(char *str)
+{
+   UNODEPTR uptr;
+
+   if (str==NULL) return;
+   if ( (uptr = um_htab[hash(str)]) == NULL) return;
+   else
+   {
+      while (uptr != NULL)
+      {
+         if (strcmp(uptr->string,str)==0)
+         {
+            if (uptr->flag!=OBJ_GRP)
+            {
+               uptr->entry++;
+               return;
+            }
+         }
+         uptr=uptr->next;
+      }
+   }
+}
+
+/*********************************************/
+/* UPDATE_EXIT  - update exit page total     */
+/*********************************************/
+
+void update_exit(char *str)
+{
+   UNODEPTR uptr;
+
+   if (str==NULL) return;
+   if ( (uptr = um_htab[hash(str)]) == NULL) return;
+   else
+   {
+      while (uptr != NULL)
+      {
+         if (strcmp(uptr->string,str)==0)
+         {
+            if (uptr->flag!=OBJ_GRP)
+            {
+               uptr->exit++;
+               return;
+            }
+         }
+         uptr=uptr->next;
+      }
+   }
+}
+
+/*********************************************/
+/* MONTH_UPDATE_EXIT  - eom exit page update */
+/*********************************************/
+
+void month_update_exit(u_long tstamp)
+{
+   HNODEPTR nptr;
+   int i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      nptr=sm_htab[i];
+      while (nptr!=NULL)
+      {
+         if (nptr->flag!=OBJ_GRP)
+         {
+            if ((tstamp-nptr->tstamp)>=visit_timeout)
+               update_exit(nptr->lasturl);
+         }
+         nptr=nptr->next;
+      }
+   }
+}
+
+/*********************************************/
+/* TOT_VISIT - calculate total visits        */
+/*********************************************/
+
+u_long tot_visit(HNODEPTR *list)
+{
+   HNODEPTR   hptr;
+   u_long     tot=0;
+   int        i;
+
+   for (i=0;i<MAXHASH;i++)
+   {
+      hptr=list[i];
+      while (hptr!=NULL)
+      {
+         if (hptr->flag!=OBJ_GRP) tot+=hptr->visit;
+         hptr=hptr->next;
+      }
+   }
+   return tot;
+}
diff -ruN webalizer-2.01-10-pristine/hashtab.h webalizer-2.01-10/hashtab.h
--- webalizer-2.01-10-pristine/hashtab.h	Fri Sep 29 05:50:30 2000
+++ webalizer-2.01-10/hashtab.h	Wed Dec 21 17:01:43 2005
@@ -53,6 +53,7 @@
               struct anode *next; };
 
 struct snode {  char *string;                 /* search string struct      */
+                char *site;
               u_long count;
               struct snode *next; };
 
@@ -84,7 +85,7 @@
                         u_long, u_long, INODEPTR *);
 extern int    put_rnode(char *, int, u_long, u_long *, RNODEPTR *);
 extern int    put_anode(char *, int, u_long, u_long *, ANODEPTR *);
-extern int    put_snode(char *, u_long, SNODEPTR *);
+extern int    put_snode(char *, char *, u_long, SNODEPTR *);
 
 #ifdef USE_DNS
 extern int    put_dnode(char *, struct in_addr *, DNODEPTR *);
diff -ruN webalizer-2.01-10-pristine/hashtab.h.orig webalizer-2.01-10/hashtab.h.orig
--- webalizer-2.01-10-pristine/hashtab.h.orig	Thu Jan  1 01:00:00 1970
+++ webalizer-2.01-10/hashtab.h.orig	Fri Sep 29 05:50:30 2000
@@ -0,0 +1,106 @@
+#ifndef _HASHTAB_H
+#define _HASHTAB_H
+
+typedef struct hnode *HNODEPTR;            /* site node (host) pointer     */
+typedef struct unode *UNODEPTR;            /* url node pointer             */
+typedef struct rnode *RNODEPTR;            /* referrer node                */
+typedef struct anode *ANODEPTR;            /* user agent node pointer      */
+typedef struct snode *SNODEPTR;            /* Search string node pointer   */
+typedef struct inode *INODEPTR;            /* user (ident) node pointer    */
+#ifdef USE_DNS
+typedef struct dnode *DNODEPTR;            /* DNS hash table node struct   */
+#endif
+
+/* Object flags */
+#define OBJ_REG  0                         /* Regular object               */
+#define OBJ_HIDE 1                         /* Hidden object                */
+#define OBJ_GRP  2                         /* Grouped object               */
+
+#ifdef USE_DNS
+struct dnode {  char *string;              /* DNS node hash table struct   */
+              struct in_addr  addr;
+              struct dnode    *llist;
+              struct dnode    *next; };
+#endif
+
+struct hnode {  char *string;              /* host hash table structure    */
+                 int flag;
+              u_long count;
+              u_long files;
+              u_long visit;                /* visit information            */
+              u_long tstamp;
+                char *lasturl;
+              double xfer;
+              struct hnode *next; };
+
+struct unode {  char *string;              /* url hash table structure     */
+                 int flag;                 /* Object type (REG, HIDE, GRP) */
+              u_long count;                /* requests counter             */
+              u_long files;                /* files counter                */
+              u_long entry;                /* entry page counter           */
+              u_long exit;                 /* exit page counter            */
+              double xfer;                 /* xfer size in bytes           */
+              struct unode *next; };       /* pointer to next node         */
+
+struct rnode {  char *string;              /* referrer hash table struct   */
+                 int flag;
+              u_long count;
+              struct rnode *next; };
+
+struct anode {  char *string;
+                 int flag;
+              u_long count;
+              struct anode *next; };
+
+struct snode {  char *string;                 /* search string struct      */
+              u_long count;
+              struct snode *next; };
+
+struct inode {  char *string;                 /* host hash table struct    */
+                 int flag;
+              u_long count;
+              u_long files;
+              u_long visit;
+              u_long tstamp;
+              double xfer;
+              struct inode *next; };
+
+extern HNODEPTR sm_htab[MAXHASH];             /* hash tables               */
+extern HNODEPTR sd_htab[MAXHASH];
+extern UNODEPTR um_htab[MAXHASH];             /* for hits, sites,          */
+extern RNODEPTR rm_htab[MAXHASH];             /* referrers and agents...   */
+extern ANODEPTR am_htab[MAXHASH];
+extern SNODEPTR sr_htab[MAXHASH];             /* search string table       */
+extern INODEPTR im_htab[MAXHASH];             /* ident table (username)    */
+#ifdef USE_DNS
+extern DNODEPTR host_table[MAXHASH];          /* DNS resolver table        */
+#endif
+
+extern int    put_hnode(char *, int, u_long, u_long, double, u_long *,
+                        u_long, u_long, char *, HNODEPTR *);
+extern int    put_unode(char *, int, u_long, double, u_long *,
+                        u_long, u_long, UNODEPTR *);
+extern int    put_inode(char *, int, u_long, u_long, double, u_long *,
+                        u_long, u_long, INODEPTR *);
+extern int    put_rnode(char *, int, u_long, u_long *, RNODEPTR *);
+extern int    put_anode(char *, int, u_long, u_long *, ANODEPTR *);
+extern int    put_snode(char *, u_long, SNODEPTR *);
+
+#ifdef USE_DNS
+extern int    put_dnode(char *, struct in_addr *, DNODEPTR *);
+extern void   del_dlist(DNODEPTR *);
+#endif
+
+extern void   del_htabs();                    /* delete hash tables        */
+extern void   del_hlist(HNODEPTR *);          /* delete host htab          */
+extern void   del_ulist(UNODEPTR *);          /* delete url htab           */
+extern void   del_rlist(RNODEPTR *);          /* delete referrer htab      */
+extern void   del_alist(ANODEPTR *);          /* delete host htab          */
+extern void   del_slist(SNODEPTR *);          /* delete host htab          */
+extern void   del_ilist(INODEPTR *);          /* delete host htab          */
+
+extern void   month_update_exit(u_long);
+extern u_long tot_visit(HNODEPTR *);
+extern char   *find_url(char *);
+
+#endif  /* _HASHTAB_H */
diff -ruN webalizer-2.01-10-pristine/lang/webalizer_lang.english webalizer-2.01-10/lang/webalizer_lang.english
--- webalizer-2.01-10-pristine/lang/webalizer_lang.english	Wed Dec 21 17:01:11 2005
+++ webalizer-2.01-10/lang/webalizer_lang.english	Wed Dec 21 17:01:43 2005
@@ -203,6 +203,8 @@
 char *msg_h_ref   = "Referrer";
 char *msg_h_ctry  = "Country";
 char *msg_h_search= "Search String";
+char *msg_h_seasit= "Search Site";
+char *msg_h_seabot= "Search Site/String";
 char *msg_h_uname = "Username";
 
 /* links along top of page */
@@ -215,7 +217,9 @@
 char *msg_hlnk_r  = "Referrers";
 char *msg_hlnk_en = "Entry";
 char *msg_hlnk_ex = "Exit";
-char *msg_hlnk_sr = "Search";
+char *msg_hlnk_sr = "Search Strings";
+char *msg_hlnk_srs= "Search Sites";
+char *msg_hlnk_srb= "Search Site/Strings";
 char *msg_hlnk_i  = "Users";
 
 /* monthly total table */
@@ -257,12 +261,16 @@
 char *msg_top_en  = "Total Entry Pages";
 char *msg_top_ex  = "Total Exit Pages";
 char *msg_top_sr  = "Total Search Strings";
+char *msg_top_srs = "Total Search Sites";
+char *msg_top_srb = "Total Search Site/String Pairs";
 char *msg_top_i   = "Total Usernames";
 char *msg_v_sites = "View All Sites";
 char *msg_v_urls  = "View All URLs";
 char *msg_v_refs  = "View All Referrers";
 char *msg_v_agents= "View All User Agents";
 char *msg_v_search= "View All Search Strings";
+char *msg_v_seasit= "View All Search Sites";
+char *msg_v_seabot= "View All Search Site/String Pairs";
 char *msg_v_users = "View All Usernames";
 
 /* short month names MUST BE 3 CHARS in size... pad if needed*/
diff -ruN webalizer-2.01-10-pristine/lang/webalizer_lang.english.orig webalizer-2.01-10/lang/webalizer_lang.english.orig
--- webalizer-2.01-10-pristine/lang/webalizer_lang.english.orig	Fri Oct  6 07:27:48 2000
+++ webalizer-2.01-10/lang/webalizer_lang.english.orig	Wed Dec 21 17:01:11 2005
@@ -154,6 +154,8 @@
          "-X        = Hide individual sites"               ,
          "-D name   = Use DNS Cache file 'name'"           ,
          "-N num    = Number of DNS processes (0=disable)" ,
+         "-w        = Disable GeoIP feature"               ,
+         "-W file   = Use specific GeoIP database 'file'"  ,
          NULL};
 
 /***********************************************************************/
@@ -334,6 +336,8 @@
 { IDX_3C('o','r','g'),    "Non-Profit Organization",          0,0,0 },
 { IDX_4C('a','r','p','a'),"Old style Arpanet (arpa)",         0,0,0 },
 { IDX_4C('n','a','t','o'),"Nato field (nato)",                0,0,0 },
+{ IDX_2C('a','1'),        "Anonymous Proxy",                  0,0,0 },
+{ IDX_2C('a','2'),        "Satellite Provider",               0,0,0 },
 { IDX_2C('a','d'),        "Andorra",                          0,0,0 },
 { IDX_2C('a','e'),        "United Arab Emirates",             0,0,0 },
 { IDX_2C('a','f'),        "Afghanistan",                      0,0,0 },
@@ -343,6 +347,7 @@
 { IDX_2C('a','m'),        "Armenia",                          0,0,0 },
 { IDX_2C('a','n'),        "Netherlands Antilles",             0,0,0 },
 { IDX_2C('a','o'),        "Angola",                           0,0,0 },
+{ IDX_2C('a','p'),        "Asia/Pacific Region",              0,0,0 },
 { IDX_2C('a','q'),        "Antarctica",                       0,0,0 },
 { IDX_2C('a','r'),        "Argentina",                        0,0,0 },
 { IDX_2C('a','s'),        "American Samoa",                   0,0,0 },
@@ -371,6 +376,7 @@
 { IDX_2C('b','z'),        "Belize",                           0,0,0 },
 { IDX_2C('c','a'),        "Canada",                           0,0,0 },
 { IDX_2C('c','c'),        "Cocos (Keeling) Islands",          0,0,0 },
+{ IDX_2C('c','d'),        "Congo",                            0,0,0 },
 { IDX_2C('c','f'),        "Central African Republic",         0,0,0 },
 { IDX_2C('c','g'),        "Congo",                            0,0,0 },
 { IDX_2C('c','h'),        "Switzerland",                      0,0,0 },
@@ -400,6 +406,7 @@
 { IDX_2C('e','r'),        "Eritrea",                          0,0,0 },
 { IDX_2C('e','s'),        "Spain",                            0,0,0 },
 { IDX_2C('e','t'),        "Ethiopia",                         0,0,0 },
+{ IDX_2C('e','u'),        "Europe",                           0,0,0 },
 { IDX_2C('f','i'),        "Finland",                          0,0,0 },
 { IDX_2C('f','j'),        "Fiji",                             0,0,0 },
 { IDX_2C('f','k'),        "Falkland Islands (Malvinas)",      0,0,0 },
@@ -510,6 +517,7 @@
 { IDX_2C('p','m'),        "St. Pierre and Miquelon",          0,0,0 },
 { IDX_2C('p','n'),        "Pitcairn",                         0,0,0 },
 { IDX_2C('p','r'),        "Puerto Rico",                      0,0,0 },
+{ IDX_2C('p','s'),        "Palestinian Territory",            0,0,0 },
 { IDX_2C('p','t'),        "Portugal",                         0,0,0 },
 { IDX_2C('p','w'),        "Palau",                            0,0,0 },
 { IDX_2C('p','y'),        "Paraguay",                         0,0,0 },
@@ -519,7 +527,7 @@
 { IDX_2C('r','u'),        "Russian Federation",               0,0,0 },
 { IDX_2C('r','w'),        "Rwanda",                           0,0,0 },
 { IDX_2C('s','a'),        "Saudi Arabia",                     0,0,0 },
-{ IDX_2C('s','B'),        "Solomon Islands",                  0,0,0 },
+{ IDX_2C('s','b'),        "Solomon Islands",                  0,0,0 },
 { IDX_2C('s','c'),        "Seychelles",                       0,0,0 },
 { IDX_2C('s','d'),        "Sudan",                            0,0,0 },
 { IDX_2C('s','e'),        "Sweden",                           0,0,0 },
@@ -566,7 +574,7 @@
 { IDX_2C('v','e'),        "Venezuela",                        0,0,0 },
 { IDX_2C('v','g'),        "Virgin Islands (British)",         0,0,0 },
 { IDX_2C('v','i'),        "Virgin Islands (U.S.)",            0,0,0 },
-{ IDX_2C('v','n'),        "Viet Nam",                         0,0,0 },
+{ IDX_2C('v','n'),        "Vietnam",                          0,0,0 },
 { IDX_2C('v','u'),        "Vanuatu",                          0,0,0 },
 { IDX_2C('w','f'),        "Wallis and Futuna Islands",        0,0,0 },
 { IDX_2C('w','s'),        "Samoa",                            0,0,0 },
diff -ruN webalizer-2.01-10-pristine/lang.h webalizer-2.01-10/lang.h
--- webalizer-2.01-10-pristine/lang.h	Fri Sep 29 05:50:30 2000
+++ webalizer-2.01-10/lang.h	Wed Dec 21 17:01:43 2005
@@ -107,6 +107,8 @@
 extern char *msg_h_ref   ;
 extern char *msg_h_ctry  ;
 extern char *msg_h_search;
+extern char *msg_h_seasit;
+extern char *msg_h_seabot;
 extern char *msg_h_uname ;
 
 extern char *msg_hlnk_ds ;
@@ -119,6 +121,8 @@
 extern char *msg_hlnk_en ;
 extern char *msg_hlnk_ex ;
 extern char *msg_hlnk_sr ;
+extern char *msg_hlnk_srs;
+extern char *msg_hlnk_srb;
 extern char *msg_hlnk_i  ;
 
 extern char *msg_mtot_ms ;
@@ -154,12 +158,16 @@
 extern char *msg_top_en  ;
 extern char *msg_top_ex  ;
 extern char *msg_top_sr  ;
+extern char *msg_top_srs ;
+extern char *msg_top_srb ;
 extern char *msg_top_i   ;
 extern char *msg_v_sites ;
 extern char *msg_v_urls  ;
 extern char *msg_v_refs  ;
 extern char *msg_v_agents;
 extern char *msg_v_search;
+extern char *msg_v_seasit;
+extern char *msg_v_seabot;
 extern char *msg_v_users ;
 
 extern char *msg_title   ;
diff -ruN webalizer-2.01-10-pristine/lang.h.orig webalizer-2.01-10/lang.h.orig
--- webalizer-2.01-10-pristine/lang.h.orig	Thu Jan  1 01:00:00 1970
+++ webalizer-2.01-10/lang.h.orig	Fri Sep 29 05:50:30 2000
@@ -0,0 +1,174 @@
+#ifndef _LANG_H
+#define _LANG_H
+
+extern char *language    ;
+
+extern char *msg_records ;
+extern char *msg_addresses;
+extern char *msg_ignored ;
+extern char *msg_bad     ;
+extern char *msg_in      ;
+extern char *msg_seconds ;
+
+extern char *msg_log_err ;
+extern char *msg_log_use ;
+extern char *msg_dir_err ;
+extern char *msg_dir_use ;
+extern char *msg_cur_dir ;
+extern char *msg_hostname;
+extern char *msg_ign_hist;
+extern char *msg_no_hist ;
+extern char *msg_get_hist;
+extern char *msg_put_hist;
+extern char *msg_hist_err;
+extern char *msg_bad_hist;
+extern char *msg_bad_conf;
+extern char *msg_bad_key ;
+extern char *msg_bad_date;
+extern char *msg_ign_nscp;
+extern char *msg_bad_rec ;
+extern char *msg_no_vrec ;
+extern char *msg_gen_rpt ;
+extern char *msg_gen_sum ;
+extern char *msg_get_data;
+extern char *msg_put_data;
+extern char *msg_no_data ;
+extern char *msg_bad_data;
+extern char *msg_data_err;
+extern char *msg_dup_data;
+
+extern char *msg_dns_nocf;
+extern char *msg_dns_nodb;
+extern char *msg_dns_nolk;
+extern char *msg_dns_usec;
+extern char *msg_dns_rslf;
+extern char *msg_dns_none;
+
+extern char *msg_nomem_ts;
+extern char *msg_nomem_tr;
+extern char *msg_nomem_tu;
+extern char *msg_nomem_tc;
+extern char *msg_nomem_ta;
+extern char *msg_nomem_tsr;
+extern char *msg_nomem_ti;
+extern char *msg_nomem_dh;
+extern char *msg_nomem_mh;
+extern char *msg_nomem_u ;
+extern char *msg_nomem_a ;
+extern char *msg_nomem_r ;
+extern char *msg_nomem_sc;
+extern char *msg_nomem_i ;
+
+extern char *msg_big_rec ;
+extern char *msg_big_host;
+extern char *msg_big_date;
+extern char *msg_big_req ;
+extern char *msg_big_ref ;
+extern char *msg_big_user;
+extern char *msg_big_one ;
+
+extern char *msg_no_open ;
+
+extern char *h_usage1    ;
+extern char *h_usage2    ;
+extern char *h_msg[];
+
+/* HTML Strings */
+
+extern char *msg_hhdr_sp ;
+extern char *msg_hhdr_gt ;
+
+extern char *msg_main_us ;
+extern char *msg_main_per;
+extern char *msg_main_sum;
+extern char *msg_main_da ;
+extern char *msg_main_mt ;
+
+extern char *msg_hmth_du ;
+extern char *msg_hmth_hu ;
+
+extern char *msg_h_by    ;
+extern char *msg_h_avg   ;
+extern char *msg_h_max   ;
+extern char *msg_h_total ;
+extern char *msg_h_totals;
+extern char *msg_h_day   ;
+extern char *msg_h_mth   ;
+extern char *msg_h_hour  ;
+extern char *msg_h_hits  ;
+extern char *msg_h_pages ;
+extern char *msg_h_visits;
+extern char *msg_h_files ;
+extern char *msg_h_sites ;
+extern char *msg_h_xfer  ;
+extern char *msg_h_hname ;
+extern char *msg_h_url   ;
+extern char *msg_h_agent ;
+extern char *msg_h_ref   ;
+extern char *msg_h_ctry  ;
+extern char *msg_h_search;
+extern char *msg_h_uname ;
+
+extern char *msg_hlnk_ds ;
+extern char *msg_hlnk_hs ;
+extern char *msg_hlnk_u  ;
+extern char *msg_hlnk_s  ;
+extern char *msg_hlnk_a  ;
+extern char *msg_hlnk_c  ;
+extern char *msg_hlnk_r  ;
+extern char *msg_hlnk_en ;
+extern char *msg_hlnk_ex ;
+extern char *msg_hlnk_sr ;
+extern char *msg_hlnk_i  ;
+
+extern char *msg_mtot_ms ;
+extern char *msg_mtot_th ;
+extern char *msg_mtot_tf ;
+extern char *msg_mtot_tx ;
+extern char *msg_mtot_us ;
+extern char *msg_mtot_ur ;
+extern char *msg_mtot_ua ;
+extern char *msg_mtot_uu ;
+extern char *msg_mtot_ui ;
+extern char *msg_mtot_mhd;
+extern char *msg_mtot_mhh;
+extern char *msg_mtot_mfd;
+extern char *msg_mtot_mpd;
+extern char *msg_mtot_mvd;
+extern char *msg_mtot_mkd;
+extern char *msg_mtot_rc ;
+
+extern char *msg_dtot_ds ;
+
+extern char *msg_htot_hs ;
+
+extern char *msg_ctry_use;
+
+extern char *msg_top_top ;
+extern char *msg_top_of  ;
+extern char *msg_top_s   ;
+extern char *msg_top_u   ;
+extern char *msg_top_r   ;
+extern char *msg_top_a   ;
+extern char *msg_top_c   ;
+extern char *msg_top_en  ;
+extern char *msg_top_ex  ;
+extern char *msg_top_sr  ;
+extern char *msg_top_i   ;
+extern char *msg_v_sites ;
+extern char *msg_v_urls  ;
+extern char *msg_v_refs  ;
+extern char *msg_v_agents;
+extern char *msg_v_search;
+extern char *msg_v_users ;
+
+extern char *msg_title   ;
+extern char *msg_h_other ;
+
+extern char *s_month[12];
+extern char *l_month[12];
+
+extern struct response_code response[];
+extern struct country_code ctry[];
+
+#endif  /* _LANG_H */
diff -ruN webalizer-2.01-10-pristine/linklist.c webalizer-2.01-10/linklist.c
--- webalizer-2.01-10-pristine/linklist.c	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/linklist.c	Wed Dec 21 17:01:43 2005
@@ -71,7 +71,7 @@
 GLISTPTR new_glist(char *, char *);                 /* new group list node */
 void     del_glist(GLISTPTR *);                     /* del group list      */
 
-int      isinstr(char *, char *);
+int      isinstr(const char *, const char *);
 
 /* Linkded list pointers */
 GLISTPTR group_sites   = NULL;                /* "group" lists            */
@@ -240,7 +240,7 @@
 /* ISINLIST - Test if string is in list      */
 /*********************************************/
 
-char *isinlist(NLISTPTR list, char *str)
+char *isinlist(NLISTPTR list, const char *str)
 {
    NLISTPTR lptr;
 
@@ -257,14 +257,35 @@
 /* ISINGLIST - Test if string is in list     */
 /*********************************************/
 
-char *isinglist(GLISTPTR list, char *str)
+char *isinglist(GLISTPTR list, const char *str)
 {
    GLISTPTR lptr;
 
    lptr=list;
    while (lptr!=NULL)
    {
-      if (isinstr(str,lptr->string)) return lptr->name;
+      if (isinstr((const char *)str,(const char *)lptr->string)) return lptr->name;
+      lptr=lptr->next;
+   }
+   return NULL;
+}
+
+/*********************************************/
+/* NAMEINGLIST - Test if string is in list   */
+/*********************************************/
+
+char *nameinglist(GLISTPTR list, const char *str, char **string)
+{
+   GLISTPTR lptr;
+
+   lptr=list;
+   while (lptr!=NULL)
+   {
+      if (isinstr(str,lptr->string))
+      {
+         if(string != NULL) *string=lptr->string;
+         return lptr->name;
+      }
       lptr=lptr->next;
    }
    return NULL;
@@ -274,9 +295,9 @@
 /* ISINSTR - Scan for string in string       */
 /*********************************************/
 
-int isinstr(char *str, char *cp)
+int isinstr(const char *str, const char *cp)
 {
-   char *cp1,*cp2;
+   const char *cp1,*cp2;
 
    cp1=(cp+strlen(cp))-1;
    if (*cp=='*')
@@ -303,6 +324,6 @@
          if (*cp1++!=*cp2++) return 0;
       }
       if (*cp1=='*') return 1;
-         else return 0;
+	 else return 0;
    }
 }
diff -ruN webalizer-2.01-10-pristine/linklist.c.orig webalizer-2.01-10/linklist.c.orig
--- webalizer-2.01-10-pristine/linklist.c.orig	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/linklist.c.orig	Wed Dec 21 17:01:12 2005
@@ -197,12 +197,12 @@
    strncpy(temp_buf,str,LINKLIST_MAX_STRING - 1);
    temp_buf[LINKLIST_MAX_STRING - 1]=0;
 
-   while (!isspace((int)*name)&&*name!=0) name++;
+   while (!isspace((unsigned char)*name)&&*name!=0) name++;
    if (*name==0) name=temp_buf;
    else
    {
       *name++=0;
-      while (isspace((int)*name)&&*name!=0) name++;
+      while (isspace((unsigned char)*name)&&*name!=0) name++;
       if (*name==0) name=temp_buf;
    }
 
diff -ruN webalizer-2.01-10-pristine/linklist.h webalizer-2.01-10/linklist.h
--- webalizer-2.01-10-pristine/linklist.h	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/linklist.h	Wed Dec 21 17:01:43 2005
@@ -46,8 +46,10 @@
 extern NLISTPTR page_type     ;               /* page view types           */
 extern GLISTPTR search_list   ;               /* Search engine list        */
 
-extern char     *isinlist(NLISTPTR, char *);        /* scan list for str   */
-extern char     *isinglist(GLISTPTR, char *);       /* scan glist for str  */
+extern char     *isinlist(NLISTPTR, const char *);  /* scan list for str   */
+extern char     *isinglist(GLISTPTR, const char *); /* scan glist for str  */
+extern char     *nameinglist(GLISTPTR, const char *,
+                             char **);              /* scan glist for str  */
 extern int      add_nlist(char *, NLISTPTR *);      /* add list item       */
 extern int      add_glist(char *, GLISTPTR *);      /* add group list item */
 
diff -ruN webalizer-2.01-10-pristine/linklist.h.orig webalizer-2.01-10/linklist.h.orig
--- webalizer-2.01-10-pristine/linklist.h.orig	Fri Sep 29 05:50:30 2000
+++ webalizer-2.01-10/linklist.h.orig	Wed Dec 21 17:01:12 2005
@@ -1,12 +1,18 @@
 #ifndef _LINKLIST_H
 #define _LINKLIST_H
 
-struct nlist {  char string[80];           /* list struct for HIDE items   */
+#ifndef	LINKLIST_MAX_STRING
+#define	LINKLIST_MAX_STRING	80
+#endif
+
+struct nlist {                             /* list struct for HIDE items   */
+              char string[LINKLIST_MAX_STRING];
               struct nlist *next; };
 typedef struct nlist *NLISTPTR;
 
-struct glist {  char string[80];           /* list struct for GROUP items  */
-                char name[80];
+struct glist {                             /* list struct for GROUP items  */
+              char string[LINKLIST_MAX_STRING];
+              char name[LINKLIST_MAX_STRING];
               struct glist *next; };
 typedef struct glist *GLISTPTR;
 
diff -ruN webalizer-2.01-10-pristine/output.c webalizer-2.01-10/output.c
--- webalizer-2.01-10-pristine/output.c	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/output.c	Wed Dec 21 17:01:43 2005
@@ -88,6 +88,8 @@
 void    top_agents_table();                         /* top n u-agents  ""  */
 void    top_ctry_table();                           /* top n countries ""  */
 void    top_search_table();                         /* top n search strs   */
+void    top_searchsite_table();                     /* top n search strs   */
+void    top_searchboth_table();                     /* top n search strs   */
 void    top_users_table();                          /* top n ident table   */
 u_long  load_url_array(  UNODEPTR *);               /* load URL array      */
 u_long  load_site_array( HNODEPTR *);               /* load Site array     */
@@ -114,6 +116,8 @@
 int     all_refs_page(u_long, u_long);              /* output refs page    */
 int     all_agents_page(u_long, u_long);            /* output agents page  */
 int     all_search_page(u_long, u_long);            /* output search page  */
+int     all_searchsite_page(u_long, u_long);            /* output search page  */
+int     all_searchboth_page(u_long, u_long);        /* output search page  */
 int     all_users_page(u_long, u_long);             /* output ident page   */
 void    dump_all_sites();                           /* dump sites tab file */
 void    dump_all_urls();                            /* dump urls tab file  */
@@ -441,10 +445,12 @@
     if ( (s_array=malloc(sizeof(SNODEPTR)*(a_ctr))) != NULL)
     {
      a_ctr=load_srch_array(s_array);
-     if (ntop_search || dump_search)
+     if (ntop_search || ntop_searchsite || ntop_searchboth || dump_search)
      {
        qsort(s_array,a_ctr,sizeof(SNODEPTR),qs_srch_cmph);
        if (ntop_search) top_search_table(); /* top search strings table     */
+       if (ntop_searchsite) top_searchsite_table(); /* top search strings table     */
+       if (ntop_searchboth) top_searchboth_table(); /* top search strings table     */
        if (dump_search) dump_all_search();  /* dump search string tab file  */
      }
      free(s_array);
@@ -516,6 +522,10 @@
       fprintf(out_fp,"<A HREF=\"#TOPREFS\">[%s]</A>\n",msg_hlnk_r);
    if (ntop_search && t_ref)
       fprintf(out_fp,"<A HREF=\"#TOPSEARCH\">[%s]</A>\n",msg_hlnk_sr);
+   if (ntop_searchsite && t_ref)
+      fprintf(out_fp,"<A HREF=\"#TOPSEARCHSITE\">[%s]</A>\n",msg_hlnk_srs);
+   if (ntop_searchboth && t_ref)
+      fprintf(out_fp,"<A HREF=\"#TOPSEARCHBOTH\">[%s]</A>\n",msg_hlnk_srb);
    if (ntop_users && t_user)
       fprintf(out_fp,"<A HREF=\"#TOPUSERS\">[%s]</A>\n",msg_hlnk_i);
    if (ntop_agents && t_agent)
@@ -1732,13 +1742,20 @@
 
    if ( (t_ref==0)||(a_ctr==0)) return;   /* don't bother if none to do    */
 
-   cnt=tot_num=a_ctr; pointer=s_array;
+   cnt=a_ctr; pointer=s_array;
+   tot_num=0;
    while(cnt--)
    {
+      if(strlen((char *)((SNODEPTR)(*pointer)->site)))
+      {
+         pointer++; continue;
+      }
       t_val+=(u_long)((SNODEPTR)(*pointer)->count);
+      tot_num++;
       pointer++;
    }
 
+   cnt=tot_num;
    if ( tot_num > ntop_search) tot_num=ntop_search;
 
    fprintf(out_fp,"<A NAME=\"TOPSEARCH\"></A>\n");
@@ -1746,7 +1763,7 @@
    fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
    fprintf(out_fp,"<TR><TH BGCOLOR=\"%s\" ALIGN=CENTER COLSPAN=4>"        \
           "%s %lu %s %lu %s</TH></TR>\n",
-          GREY, msg_top_top, tot_num, msg_top_of, a_ctr, msg_top_sr);
+          GREY, msg_top_top, tot_num, msg_top_of, cnt, msg_top_sr);
    fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
    fprintf(out_fp,"<TR><TH BGCOLOR=\"%s\" ALIGN=center>"                  \
           "<FONT SIZE=\"-1\">#</FONT></TH>\n",
@@ -1763,6 +1780,7 @@
    while(tot_num)
    {
       sptr=*pointer++;
+      if(strlen(sptr->site)) continue;
       fprintf(out_fp,
          "<TR>\n"                                                     \
          "<TD ALIGN=center><FONT SIZE=\"-1\"><B>%d</B></FONT></TD>\n" \
@@ -1778,7 +1796,7 @@
    fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
    if ( (all_search) && (a_ctr>ntop_search) )
    {
-      if (all_search_page(a_ctr, t_val))
+      if (all_search_page(cnt, t_val))
       {
          fprintf(out_fp,"<TR BGCOLOR=\"%s\">",GRPCOLOR);
          fprintf(out_fp,"<TD COLSPAN=4 ALIGN=\"center\">\n");
@@ -1791,6 +1809,164 @@
    fprintf(out_fp,"</TABLE>\n<P>\n");
 }
 
+/***********************************************/
+/* TOP_SEARCHSITE_TABLE - generate top n table */
+/***********************************************/
+
+void top_searchsite_table()
+{
+   u_long   cnt,t_val=0, tot_num;
+   int      i;
+   SNODEPTR sptr, *pointer;
+
+   if ( (t_ref==0)||(a_ctr==0)) return;   /* don't bother if none to do    */
+
+   cnt=a_ctr; pointer=s_array;
+   tot_num=0;
+   while(cnt--)
+   {
+      if(strlen((char *)((SNODEPTR)(*pointer)->string)))
+      {
+         pointer++; continue;
+      }
+      t_val+=(u_long)((SNODEPTR)(*pointer)->count);
+      tot_num++;
+      pointer++;
+   }
+
+   cnt=tot_num;
+   if ( tot_num > ntop_searchsite) tot_num=ntop_searchsite;
+
+   fprintf(out_fp,"<A NAME=\"TOPSEARCHSITE\"></A>\n");
+   fprintf(out_fp,"<TABLE WIDTH=510 BORDER=2 CELLSPACING=1 CELLPADDING=1>\n");
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+   fprintf(out_fp,"<TR><TH BGCOLOR=\"%s\" ALIGN=CENTER COLSPAN=4>"        \
+          "%s %lu %s %lu %s</TH></TR>\n",
+          GREY, msg_top_top, tot_num, msg_top_of, cnt, msg_top_srs);
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+   fprintf(out_fp,"<TR><TH BGCOLOR=\"%s\" ALIGN=center>"                  \
+          "<FONT SIZE=\"-1\">#</FONT></TH>\n",
+          GREY);
+   fprintf(out_fp,"<TH BGCOLOR=\"%s\" ALIGN=center COLSPAN=2>"            \
+          "<FONT SIZE=\"-1\">%s</FONT></TH>\n",
+          DKGREEN,msg_h_hits);
+   fprintf(out_fp,"<TH BGCOLOR=\"%s\" ALIGN=center>"                      \
+          "<FONT SIZE=\"-1\">%s</FONT></TH></TR>\n",
+          CYAN,msg_h_seasit);
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+
+   pointer=s_array; i=0;
+   while(tot_num)
+   {
+      sptr=*pointer++;
+      if(strlen(sptr->string)) continue;
+      fprintf(out_fp,
+         "<TR>\n"                                                     \
+         "<TD ALIGN=center><FONT SIZE=\"-1\"><B>%d</B></FONT></TD>\n" \
+         "<TD ALIGN=right><FONT SIZE=\"-1\"><B>%lu</B></FONT></TD>\n" \
+         "<TD ALIGN=right><FONT SIZE=\"-2\">%3.02f%%</FONT></TD>\n"   \
+         "<TD ALIGN=left NOWRAP><FONT SIZE=\"-1\">",
+         i+1,sptr->count,
+         (t_val==0)?0:((float)sptr->count/t_val)*100.0);
+      fprintf(out_fp,"%s</FONT></TD></TR>\n",sptr->site);
+      tot_num--;
+      i++;
+   }
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+   if ( (all_searchsites) && (cnt>ntop_searchsite) )
+   {
+      if (all_searchsite_page(a_ctr, t_val))
+      {
+         fprintf(out_fp,"<TR BGCOLOR=\"%s\">",GRPCOLOR);
+         fprintf(out_fp,"<TD COLSPAN=4 ALIGN=\"center\">\n");
+         fprintf(out_fp,"<FONT SIZE=\"-1\">");
+         fprintf(out_fp,"<A HREF=\"./searchsite_%04d%02d.%s\">",
+                 cur_year,cur_month,html_ext);
+         fprintf(out_fp,"%s</A></TD></TR>\n",msg_v_seasit);
+      }
+   }
+   fprintf(out_fp,"</TABLE>\n<P>\n");
+}
+
+/***********************************************/
+/* TOP_SEARCHBOTH_TABLE - generate top n table */
+/***********************************************/
+
+void top_searchboth_table()
+{
+   u_long   cnt,t_val=0, tot_num;
+   int      i;
+   SNODEPTR sptr, *pointer;
+
+   if ( (t_ref==0)||(a_ctr==0)) return;   /* don't bother if none to do    */
+
+   cnt=a_ctr; pointer=s_array;
+   tot_num=0;
+   while(cnt--)
+   {
+      if(!strlen((char *)((SNODEPTR)(*pointer)->string))||!strlen((char *)((SNODEPTR)(*pointer)->site)))
+      {
+         pointer++; continue;
+      }
+      t_val+=(u_long)((SNODEPTR)(*pointer)->count);
+      tot_num++;
+      pointer++;
+   }
+
+   cnt=tot_num;
+   if ( tot_num > ntop_searchboth) tot_num=ntop_searchboth;
+
+   fprintf(out_fp,"<A NAME=\"TOPSEARCHBOTH\"></A>\n");
+   fprintf(out_fp,"<TABLE WIDTH=510 BORDER=2 CELLSPACING=1 CELLPADDING=1>\n");
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+   fprintf(out_fp,"<TR><TH BGCOLOR=\"%s\" ALIGN=CENTER COLSPAN=4>"        \
+          "%s %lu %s %lu %s</TH></TR>\n",
+          GREY, msg_top_top, tot_num, msg_top_of, cnt, msg_top_srb);
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+   fprintf(out_fp,"<TR><TH BGCOLOR=\"%s\" ALIGN=center>"                  \
+          "<FONT SIZE=\"-1\">#</FONT></TH>\n",
+          GREY);
+   fprintf(out_fp,"<TH BGCOLOR=\"%s\" ALIGN=center COLSPAN=2>"            \
+          "<FONT SIZE=\"-1\">%s</FONT></TH>\n",
+          DKGREEN,msg_h_hits);
+   fprintf(out_fp,"<TH BGCOLOR=\"%s\" ALIGN=center>"                      \
+          "<FONT SIZE=\"-1\">%s</FONT></TH></TR>\n",
+          CYAN,msg_h_seabot);
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+
+   pointer=s_array; i=0;
+   while(tot_num)
+   {
+      sptr=*pointer++;
+      if(!strlen(sptr->string) || !strlen(sptr->site)) continue;
+      fprintf(out_fp,
+         "<TR>\n"                                                     \
+         "<TD ALIGN=center><FONT SIZE=\"-1\"><B>%d</B></FONT></TD>\n" \
+         "<TD ALIGN=right><FONT SIZE=\"-1\"><B>%lu</B></FONT></TD>\n" \
+         "<TD ALIGN=right><FONT SIZE=\"-2\">%3.02f%%</FONT></TD>\n"   \
+         "<TD ALIGN=left NOWRAP><FONT SIZE=\"-1\">",
+         i+1,sptr->count,
+         (t_val==0)?0:((float)sptr->count/t_val)*100.0);
+      fprintf(out_fp,"%s -&gt; %s</FONT></TD></TR>\n",sptr->site,sptr->string);
+      tot_num--;
+      i++;
+   }
+   fprintf(out_fp,"<TR><TH HEIGHT=4></TH></TR>\n");
+   if ( (all_searchboth) && (cnt>ntop_searchboth) )
+   {
+      if (all_searchboth_page(a_ctr, t_val))
+      {
+         fprintf(out_fp,"<TR BGCOLOR=\"%s\">",GRPCOLOR);
+         fprintf(out_fp,"<TD COLSPAN=4 ALIGN=\"center\">\n");
+         fprintf(out_fp,"<FONT SIZE=\"-1\">");
+         fprintf(out_fp,"<A HREF=\"./searchboth_%04d%02d.%s\">",
+                 cur_year,cur_month,html_ext);
+         fprintf(out_fp,"%s</A></TD></TR>\n",msg_v_seabot);
+      }
+   }
+   fprintf(out_fp,"</TABLE>\n<P>\n");
+}
+
 /*********************************************/
 /* ALL_SEARCH_PAGE - HTML for search strings */
 /*********************************************/
@@ -1821,6 +1997,94 @@
    while(tot_num)
    {
       sptr=*pointer++;
+      if(strlen(sptr->site)) continue;
+      fprintf(out_fp,"%-8lu %6.02f%%  %s\n",
+         sptr->count,
+         (t_val==0)?0:((float)sptr->count/t_val)*100.0,
+         sptr->string);
+      tot_num--;
+   }
+   fprintf(out_fp,"</PRE></FONT>\n");
+   write_html_tail(out_fp);
+   fclose(out_fp);
+   return 1;
+}
+
+/*************************************************/
+/* ALL_SEARCHSITE_PAGE - HTML for search strings */
+/*************************************************/
+
+int all_searchsite_page(u_long tot_num, u_long t_val)
+{
+   SNODEPTR sptr, *pointer;
+   char     search_fname[256], buffer[256];
+   FILE     *out_fp;
+
+   if (!tot_num) return 0;
+
+   /* generate file name */
+   sprintf(search_fname,"searchsite_%04d%02d.%s",cur_year,cur_month,html_ext);
+
+   /* open file */
+   if ( (out_fp=open_out_file(search_fname))==NULL ) return 0;
+
+   sprintf(buffer,"%s %d - %s",l_month[cur_month-1],cur_year,msg_h_seasit);
+   write_html_head(buffer, out_fp);
+
+   fprintf(out_fp,"<FONT SIZE=\"-1\"></CENTER><PRE>\n");
+
+   fprintf(out_fp," %12s      %s\n",msg_h_hits,msg_h_seasit);
+   fprintf(out_fp,"----------------  ----------------------\n\n");
+
+   pointer=s_array;
+   while(tot_num)
+   {
+      sptr=*pointer++;
+      if(strlen(sptr->string)) continue;
+      fprintf(out_fp,"%-8lu %6.02f%%  %s\n",
+         sptr->count,
+         (t_val==0)?0:((float)sptr->count/t_val)*100.0,
+         sptr->string);
+      tot_num--;
+   }
+   fprintf(out_fp,"</PRE></FONT>\n");
+   write_html_tail(out_fp);
+   fclose(out_fp);
+   return 1;
+}
+
+
+/*************************************************/
+/* ALL_SEARCHSITE_PAGE - HTML for search strings */
+/*************************************************/
+
+int all_searchboth_page(u_long tot_num, u_long t_val)
+{
+   SNODEPTR sptr, *pointer;
+   char     search_fname[256], buffer[256];
+   FILE     *out_fp;
+
+   if (!tot_num) return 0;
+
+   /* generate file name */
+   sprintf(search_fname,"searchsite_%04d%02d.%s",cur_year,cur_month,html_ext);
+
+   /* open file */
+   if ( (out_fp=open_out_file(search_fname))==NULL ) return 0;
+
+   sprintf(buffer,"%s %d - %s",l_month[cur_month-1],cur_year,msg_h_seabot);
+   write_html_head(buffer, out_fp);
+
+   fprintf(out_fp,"<FONT SIZE=\"-1\"></CENTER><PRE>\n");
+
+   fprintf(out_fp," %12s      %s\n",msg_h_hits,msg_h_seabot);
+   fprintf(out_fp,"----------------  ----------------------\n\n");
+
+   pointer=s_array;
+   while(tot_num)
+   {
+      sptr=*pointer++;
+      if(!strlen(sptr->string) || !strlen(sptr->site)) continue;
       fprintf(out_fp,"%-8lu %6.02f%%  %s\n",
          sptr->count,
          (t_val==0)?0:((float)sptr->count/t_val)*100.0,
@@ -2450,7 +2714,8 @@
    while(cnt)
    {
       sptr=*pointer++;
-      fprintf(out_fp,"%lu\t%s\n",sptr->count,sptr->string);
+      if(!strlen(sptr->site) || !strlen(sptr->string)) continue;
+      fprintf(out_fp,"%lu\t%s\t%s\n",sptr->count,sptr->string,sptr->site);
       cnt--;
    }
    fclose(out_fp);
diff -ruN webalizer-2.01-10-pristine/output.c.orig webalizer-2.01-10/output.c.orig
--- webalizer-2.01-10-pristine/output.c.orig	Wed Dec 21 17:01:11 2005
+++ webalizer-2.01-10/output.c.orig	Wed Dec 21 17:01:12 2005
@@ -1547,10 +1547,17 @@
       rptr=*pointer++;
       if (rptr->flag == OBJ_REG)
       {
-         fprintf(out_fp,"%-8lu %6.02f%%  %s\n",
-            rptr->count,
-            (t_hit==0)?0:((float)rptr->count/t_hit)*100.0,
-            rptr->string);
+	 if (strstr(rptr->string,"://")!=NULL)
+	    fprintf(out_fp,"%-8lu %6.02f%%  <A HREF=\"%s\">%s</A>\n",
+	       rptr->count,
+	       (t_hit==0)?0:((float)rptr->count/t_hit)*100.0,
+	       rptr->string,
+	       rptr->string);
+	 else
+	    fprintf(out_fp,"%-8lu %6.02f%%  %s\n",
+	       rptr->count,
+	       (t_hit==0)?0:((float)rptr->count/t_hit)*100.0,
+	       rptr->string);
          r_reg--;
       }
    }
diff -ruN webalizer-2.01-10-pristine/preserve.c webalizer-2.01-10/preserve.c
--- webalizer-2.01-10-pristine/preserve.c	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/preserve.c	Wed Dec 21 17:01:59 2005
@@ -352,7 +352,7 @@
       sptr=sr_htab[i];
       while (sptr!=NULL)
       {
-         sprintf(buffer,"%s\n%lu\n", sptr->string,sptr->count);
+         sprintf(buffer,"%s\n%s\n%lu\n", sptr->string,sptr->site,sptr->count);
          if (fputs(buffer,fp)==EOF) return 1;  /* error exit */
          sptr=sptr->next;
       }
@@ -402,6 +402,7 @@
 
    char   buffer[BUFSIZE];
    char   tmp_buf[BUFSIZE];
+   char   tmp_buf2[BUFSIZE];
 
    u_long ul_bogus=0;
 
@@ -657,13 +658,17 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 13;  /* error exit */
+      strncpy(tmp_buf2,buffer,MAXSRCH);
+      tmp_buf2[strlen(buffer)-1]=0;
+
+      if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 13;  /* error exit */
       if (!isdigit((unsigned char)buffer[0])) return 13;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%lu",&t_snode.count);
 
       /* insert node */
-      if (put_snode(tmp_buf,t_snode.count,sr_htab))
+      if (put_snode(tmp_buf,tmp_buf2,t_snode.count,sr_htab))
       {
          if (verbose) fprintf(stderr,"%s %s\n", msg_nomem_sc, t_snode.string);
       }
diff -ruN webalizer-2.01-10-pristine/preserve.c.orig webalizer-2.01-10/preserve.c.orig
--- webalizer-2.01-10-pristine/preserve.c.orig	Wed Oct 24 08:22:42 2001
+++ webalizer-2.01-10/preserve.c.orig	Wed Dec 21 17:01:43 2005
@@ -352,7 +352,7 @@
       sptr=sr_htab[i];
       while (sptr!=NULL)
       {
-         sprintf(buffer,"%s\n%lu\n", sptr->string,sptr->count);
+         sprintf(buffer,"%s\n%s\n%lu\n", sptr->string,sptr->site,sptr->count);
          if (fputs(buffer,fp)==EOF) return 1;  /* error exit */
          sptr=sptr->next;
       }
@@ -402,6 +402,7 @@
 
    char   buffer[BUFSIZE];
    char   tmp_buf[BUFSIZE];
+   char   tmp_buf2[BUFSIZE];
 
    u_long ul_bogus=0;
 
@@ -497,7 +498,7 @@
       tmp_buf[strlen(tmp_buf)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 10;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 10;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 10;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%d %lu %lu %lf %lu %lu",
@@ -528,7 +529,7 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 8;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 8;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 8;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%d %lu %lu %lf %lu %lu",
@@ -568,7 +569,7 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 9;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 9;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 9;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%d %lu %lu %lf %lu %lu",
@@ -607,7 +608,7 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 11;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 11;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 11;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%d %lu",&t_rnode.flag,&t_rnode.count);
@@ -632,7 +633,7 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 12;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 12;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 12;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%d %lu",&t_anode.flag,&t_anode.count);
@@ -657,7 +658,7 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 13;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 13;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 13;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%lu",&t_snode.count);
@@ -682,7 +683,7 @@
       tmp_buf[strlen(buffer)-1]=0;
 
       if ((fgets(buffer,BUFSIZE,fp)) == NULL) return 14;  /* error exit */
-      if (!isdigit((int)buffer[0])) return 14;  /* error exit */
+      if (!isdigit((unsigned char)buffer[0])) return 14;  /* error exit */
 
       /* load temporary node data */
       sscanf(buffer,"%d %lu %lu %lf %lu %lu",
diff -ruN webalizer-2.01-10-pristine/sample.conf webalizer-2.01-10/sample.conf
--- webalizer-2.01-10-pristine/sample.conf	Wed Dec 21 17:01:11 2005
+++ webalizer-2.01-10/sample.conf	Wed Dec 21 17:01:43 2005
@@ -311,6 +311,8 @@
 #TopEntry        10
 #TopExit         10
 #TopSearch       20
+#TopSearchSites  10
+#TopSearchSiteStrs 30
 #TopUsers        20
 
 # The All* keywords allow the display of all URL's, Sites, Referrers
@@ -333,6 +335,8 @@
 #AllReferrers	no
 #AllAgents	no
 #AllSearchStr	no
+#AllSearchSites no
+#AllSearchSiteStrs no
 #AllUsers       no
 
 # The Webalizer normally strips the string 'index.' off the end of
diff -ruN webalizer-2.01-10-pristine/sample.conf.orig webalizer-2.01-10/sample.conf.orig
--- webalizer-2.01-10-pristine/sample.conf.orig	Fri Sep 29 05:51:42 2000
+++ webalizer-2.01-10/sample.conf.orig	Wed Dec 21 17:01:11 2005
@@ -568,4 +568,12 @@
 #DumpUsers	no
 #DumpSearchStr  no
 
+# If you compiled Webalizer with GeoIP library, it becomes enabled
+# by default. But if you wish to disable it, just set GeoIP to 'no'.
+# You may also want to specify database file path manually, if you
+# don't have one installed on system (in case of static build).
+
+#GeoIP		yes
+#GeoIPDatabase	/usr/local/share/GeoIP/GeoIP.dat
+
 # End of configuration file...  Have a nice day!
diff -ruN webalizer-2.01-10-pristine/webalizer.c webalizer-2.01-10/webalizer.c
--- webalizer-2.01-10-pristine/webalizer.c	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/webalizer.c	Wed Dec 21 17:01:43 2005
@@ -161,6 +161,8 @@
 int     ntop_agents  = 15;                    /* top n user agents ""     */
 int     ntop_ctrys   = 30;                    /* top n countries   ""     */
 int     ntop_search  = 20;                    /* top n search strings     */
+int     ntop_searchsite = 10;                 /* top n search sites       */
+int     ntop_searchboth = 30;                 /* top n search site/string */
 int     ntop_users   = 20;                    /* top n users to display   */
 
 int     all_sites    = 0;                     /* List All sites (0=no)    */
@@ -168,6 +170,8 @@
 int     all_refs     = 0;                     /* List All Referrers       */
 int     all_agents   = 0;                     /* List All User Agents     */
 int     all_search   = 0;                     /* List All Search Strings  */
+int     all_searchsites = 0;                  /* List All Search Sites    */
+int     all_searchboth  = 0;                  /* List All Search String/Sites */
 int     all_users    = 0;                     /* List All Usernames       */
 
 int     dump_sites   = 0;                     /* Dump tab delimited sites */
@@ -1519,6 +1523,10 @@
                      "GeoIP",             /* Use GeoIP library (0=no)   88  */
                      "GeoIPDatabase",     /* GeoIP database             89  */
 #endif	/* USE_GEOIP */
+                     "TopSearchSites",    /* Top Search Sites           90  */
+                     "TopSearchSiteStrs", /* Top Search Site/String Pair91  */
+                     "AllSearchSites",    /* List all Search Sites      92  */
+                     "AllSearchSiteStrs", /* List all Search Site/String93  */
                    };
 
    FILE *fp;
@@ -1669,6 +1677,10 @@
         case 88: use_geoip=(value[0]=='n')?0:1; break;    /* GeoIP          */
         case 89: geoip_dbase=save_opt(value); break;      /* GeoIPDatabase  */
 #endif	/* USE_GEOIP */
+        case 90: ntop_searchsite = atoi(value);        break; /* Top Search pgs */
+        case 91: ntop_searchboth = atoi(value);        break; /* Top Search pgs */
+        case 92: all_searchsites=(value[0]=='y')?1:0;  break; /* All Srch str   */
+        case 93: all_searchboth=(value[0]=='y')?1:0;   break; /* All Srch str   */
       }
    }
    fclose(fp);
@@ -1888,11 +1900,11 @@
    /* ptr should point to unescaped query string */
    char tmpbuf[BUFSIZE];
    char srch[80]="";
-   unsigned char *cp1, *cp2, *cps;
+   unsigned char *cp1, *cp2, *cps, *cpsite;
    int  sp_flg=0;
 
    /* Check if search engine referrer or return  */
-   if ( (cps=isinglist(search_list,log_rec.refer))==NULL) return; 
+   if ( (cps=nameinglist(search_list,log_rec.refer,(char **)&cpsite))==NULL) return; 
 
    /* Try to find query variable */
    srch[0]='?'; strcpy(&srch[1],cps);              /* First, try "?..."      */
@@ -1929,10 +1941,22 @@
    cp1=cp2;
    while (*cp1!=0) { if ((*cp1<32)||(*cp1==127)) *cp1='_'; cp1++; }
 
-   if (put_snode(cp2,(u_long)1,sr_htab))
+   if (put_snode(cp2,cpsite,(u_long)1,sr_htab))
    {
       if (verbose)
-      /* Error adding search string node, skipping .... */
+      /* Error adding search sitestring node, skipping .... */
+      fprintf(stderr,"%s %s\n", msg_nomem_sc, tmpbuf);
+   }
+   if (put_snode("",cpsite,(u_long)1,sr_htab))
+   {
+      if (verbose)
+      /* Error adding search site node, skipping .... */
+      fprintf(stderr,"%s %s\n", msg_nomem_sc, tmpbuf);
+   }
+   if (put_snode(cp2,"",(u_long)1,sr_htab))
+   {
+      if (verbose)
+      /* Error adding search site node, skipping .... */
       fprintf(stderr,"%s %s\n", msg_nomem_sc, tmpbuf);
    }
    return;
diff -ruN webalizer-2.01-10-pristine/webalizer.c.orig webalizer-2.01-10/webalizer.c.orig
--- webalizer-2.01-10-pristine/webalizer.c.orig	Wed Dec 21 17:01:12 2005
+++ webalizer-2.01-10/webalizer.c.orig	Wed Dec 21 17:01:12 2005
@@ -749,6 +749,14 @@
          /* un-escape URL */
          unescape(log_rec.url);
 
+         /* strip query portion of cgi scripts */
+         cp1 = log_rec.url;
+         while (*cp1 != '\0')
+           if (!isurlchar(*cp1)) { *cp1 = '\0'; break; }
+           else cp1++;
+         if (log_rec.url[0]=='\0')
+           { log_rec.url[0]='/'; log_rec.url[1]='\0'; }
+
          /* check for service (ie: http://) and lowercase if found */
          if ( (cp2=strstr(log_rec.url,"://")) != NULL)
          {
@@ -759,14 +767,6 @@
                cp1++;
             }
          }
-
-         /* strip query portion of cgi scripts */
-         cp1 = log_rec.url;
-         while (*cp1 != '\0')
-           if (!isurlchar(*cp1)) { *cp1 = '\0'; break; }
-           else cp1++;
-         if (log_rec.url[0]=='\0')
-           { log_rec.url[0]='/'; log_rec.url[1]='\0'; }
 
          /* strip off index.html (or any aliases) */
          lptr=index_alias;
diff -ruN webalizer-2.01-10-pristine/webalizer.h webalizer-2.01-10/webalizer.h
--- webalizer-2.01-10-pristine/webalizer.h	Wed Dec 21 17:01:11 2005
+++ webalizer-2.01-10/webalizer.h	Wed Dec 21 17:01:43 2005
@@ -211,6 +211,8 @@
 extern int     ntop_agents  ;                 /* top n user agents ""     */
 extern int     ntop_ctrys   ;                 /* top n countries   ""     */
 extern int     ntop_search  ;                 /* top n search strings     */
+extern int     ntop_searchsite;               /* top n search sites       */
+extern int     ntop_searchboth;               /* top n search site/strings*/
 extern int     ntop_users   ;                 /* top n users to display   */
 
 extern int     all_sites    ;                 /* List All sites (0=no)    */
@@ -218,6 +220,8 @@
 extern int     all_refs     ;                 /* List All Referrers       */
 extern int     all_agents   ;                 /* List All User Agents     */
 extern int     all_search   ;                 /* List All Search Strings  */
+extern int     all_searchsites;               /* List All Search Sites    */
+extern int     all_searchboth;                /* List All Search Site/Strings*/
 extern int     all_users    ;                 /* List All Usernames       */
 
 extern int     dump_sites   ;                 /* Dump tab delimited sites */
diff -ruN webalizer-2.01-10-pristine/webalizer.h.orig webalizer-2.01-10/webalizer.h.orig
--- webalizer-2.01-10-pristine/webalizer.h.orig	Sat Feb 10 01:58:18 2001
+++ webalizer-2.01-10/webalizer.h.orig	Wed Dec 21 17:01:11 2005
@@ -16,8 +16,8 @@
 #define MAXURL   1024                  /* Max HTTP request/URL field size  */
 #define MAXURLH  128                   /* Max URL field size in htab       */
 #define MAXREF   1024                  /* Max referrer field size          */
-#define MAXREFH  128                   /* Max referrer field size in htab  */
-#define MAXAGENT 64                    /* Max user agent field size        */
+#define MAXREFH  512                   /* Max referrer field size in htab  */
+#define MAXAGENT 256                   /* Max user agent field size        */
 #define MAXCTRY  48                    /* Max country name size            */
 #define MAXSRCH  256                   /* Max size of search string buffer */
 #define MAXSRCHH 64                    /* Max size of search str in htab   */
@@ -123,6 +123,10 @@
 #endif  /* INADDR_NONE */
 #endif
 
+#ifdef WIN32
+#include <windows.h>
+#endif
+
 /* Response code structure */
 struct response_code {     char    *desc;         /* response code struct  */
                          u_long    count; };
@@ -190,6 +194,12 @@
 extern char    *blank_str   ;                 /* blank string             */
 extern char    *dns_cache   ;                 /* DNS cache file name      */
 extern int     dns_children ;                 /* # of DNS children        */
+
+#ifdef USE_GEOIP
+extern int     use_geoip    ;                 /* Use GeoIP library        */
+extern char    *geoip_dbase ;                 /* Use specific GeoIP dbase */
+extern char    gi_db_info[256];               /* GeoIP db info (HTMLized) */
+#endif	/* USE_GEOIP */
 
 extern int     ntop_sites   ;                 /* top n sites to display   */
 extern int     ntop_sitesK  ;                 /* top n sites (by kbytes)  */
diff -ruN webalizer-2.01-10-pristine/webalizer_lang.h webalizer-2.01-10/webalizer_lang.h
--- webalizer-2.01-10-pristine/webalizer_lang.h	Wed Dec 21 17:01:11 2005
+++ webalizer-2.01-10/webalizer_lang.h	Wed Dec 21 17:01:43 2005
@@ -203,6 +203,8 @@
 char *msg_h_ref   = "Referrer";
 char *msg_h_ctry  = "Country";
 char *msg_h_search= "Search String";
+char *msg_h_seasit= "Search Site";
+char *msg_h_seabot= "Search Site/String";
 char *msg_h_uname = "Username";
 
 /* links along top of page */
@@ -215,7 +217,9 @@
 char *msg_hlnk_r  = "Referrers";
 char *msg_hlnk_en = "Entry";
 char *msg_hlnk_ex = "Exit";
-char *msg_hlnk_sr = "Search";
+char *msg_hlnk_sr = "Search Strings";
+char *msg_hlnk_srs= "Search Sites";
+char *msg_hlnk_srb= "Search Site/Strings";
 char *msg_hlnk_i  = "Users";
 
 /* monthly total table */
@@ -257,12 +261,16 @@
 char *msg_top_en  = "Total Entry Pages";
 char *msg_top_ex  = "Total Exit Pages";
 char *msg_top_sr  = "Total Search Strings";
+char *msg_top_srs = "Total Search Sites";
+char *msg_top_srb = "Total Search Site/String Pairs";
 char *msg_top_i   = "Total Usernames";
 char *msg_v_sites = "View All Sites";
 char *msg_v_urls  = "View All URLs";
 char *msg_v_refs  = "View All Referrers";
 char *msg_v_agents= "View All User Agents";
 char *msg_v_search= "View All Search Strings";
+char *msg_v_seasit= "View All Search Sites";
+char *msg_v_seabot= "View All Search Site/String Pairs";
 char *msg_v_users = "View All Usernames";
 
 /* short month names MUST BE 3 CHARS in size... pad if needed*/
